# Check processes that lead to O3 deposition

# NOTE: takes into account the LAI profile
# NOTE: Here we use canopy ustar not layer ustar so  layer windspeed is not taken into account
# NOTE: This also uses canopy height not layer height
Rinc: List[float] = [calc_Rinc(sum(SAI_sum_per_layer), canopy_height_lim, ustar)
                        for iL in range(nL)]

# NOTE: takes into account the LAI profile
Rext: List[float] = [calc_Rext(Rext_base, SAI_sum_per_layer[iL]) for iL in range(nL)]

# NOTE: does not take into account the LAI profile
Rsto: List[float] = [calc_Rsto(mean_gsto_per_layer[iL]) for iL in range(nL)]

# NOTE: calculate soil resistance taking into account snow depth. Otherwise this is constant value(RSoil)
Rgs = calc_Rgs(Rsoil, snow_depth, Ts_C)


# NOTE: We have 2 rsur methods taken from old DO3SE code. I think we always use single layer currently.
# NOTE: When using single layer we ignore LAI profile and only take top layer values
if rsur_calc_method == "single_layer":
    Rsur: list = [calc_Rsur(
        Rb,
        Rsto[TOP_LAYER],
        Rext[TOP_LAYER],
        Rinc[TOP_LAYER],
        Rgs,
        LAI_sum_per_layer[TOP_LAYER],  # I wonder if this should actually have been total canopy LAI not top layer LAI!!
        SAI_sum_per_layer[TOP_LAYER],  # I wonder if this should actually have been total canopy LAI not top layer LAI!!
    ) for _ in range(nL)]
elif rsur_calc_method == "multi_layer":
    Rsur: List = calc_Rsur_multilayer(
        nL,
        Rb,
        Rsto,
        Rext,
        LAI_sum_per_layer,
        SAI_sum_per_layer
    )
else:
    raise ValueError("Invalid Rsur calc method")

# NOTE: We then Calculate O3 concentration for other layers
Process(
        func=met_deposition_helpers.calc_multi_layer_O3_ozone_concentration,
        comment="Calculate Ozone concentration for other layers",
        config_inputs=lambda config: [
            I(config.Land_Cover.nL, as_='nL'),
        ],
        state_inputs=lambda state: [
            I(state.canopy.canopy_top_o3, as_='O3_in'),
            I(0, as_='rm_Ra'),  # 0 because we have already brought ozone to top of canopy
            # TODO: Check using correct resistances
            # I(state.canopy.rmodel_O3.Ra_canopy_to_izr, as_='rm_Ra'),
            I(list(reversed(state.canopy.rmodel_O3.Rinc)), as_='rm_Rinc'),
            I(list(reversed(state.canopy.rmodel_O3.Rsur)), as_='rm_Rsur'),
            I(state.canopy.rmodel_O3.Rgs, as_='rm_Rgs'),
        ],
        state_outputs=lambda result: [
            (list(reversed(result))[iL], f'canopy_layers.{iL}.micro_met.micro_O3')
            for iL in range(nL)
        ],
    )


def calc_multi_layer_O3_ozone_concentration(
    nL: int,
    O3_in: float,
    rm_Ra: float,
    rm_Rinc: List[float],
    rm_Rsur: List[float],
    rm_Rgs: float,
) -> List[float]:
    """Calculate O3 concentration for all layers.

    Requires that the value for the top layer (umet(1)%O3) is already known.

    # TODO: Is this absorbed O3 at each layer?

    Assumes layer 0 is top layer.

    This uses SGESV which is an old Fortran function. The documentation is vague on this.

    Parameters
    ----------
    nL: float
        number of model layers
    O3_in: float
        O3 for top layer micromet[ppb]
    rm_Ra: float
        rmodel_O3 Ra
    rm_Rinc: List[float]
        rmodel_O3 Rinc per layer
    rm_Rsur: List[float]
        rmodel_O3 Rsur per layer
    rm_Rgs: float
        rmodel_O3 Rgs

    Output
        O3 per layer[ppb]

    """
    # real, dimension(nL+1) :: bigR, smallR, C
    # real, dimension(nL+1,nL+1) :: X
    # bigR = np.full((nL + 1), None, dtype=float)
    # smallR = np.full((nL + 1), None, dtype=float)
    C = np.full((nL + 1), 0, dtype=float)
    X = np.full((nL + 1, nL + 1), 0, dtype=float)

    bigR = np.array([rm_Ra] + rm_Rinc)
    assert bigR.shape == (nL + 1,)

    # TODO: per-layer Rb
    smallR = np.array(rm_Rsur + [rm_Rgs])
    assert smallR.shape == (nL + 1,)
    # Iterate over columns
    for j in range(0, nL + 1):
        X[0:j, j] = bigR[0:j]
        X[j, j] = X[j, j] + smallR[j]
        if j < nL:  # TODO: Check this
            X[j + 1, j] = -smallR[j]

    C[0] = O3_in

    # sgesv is a Fortran Matrix Equation Solver

    out = sgesv(X, C)
    lu, IPIV, C_out, info = sgesv(X, C)

    if info != 0:
        raise Exception('SGESV Failed')
    C_final = smallR * C_out
    O3_out = C_final[0: nL]
    return O3_out